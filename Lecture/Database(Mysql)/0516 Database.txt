-- Mysql 접속
[1] mysql -u root -p
[2] mysql -u (사용자명) -p

-- Mysql 나오기
[1] exit; 또는 quit;

-- 새로운 계정 만들기
    기본적으로 mysql 은 로컬(local) 에서만 접근이 가능
    로컬에서만 가능하다는 말은 DB 서버(MySQL84) 와 DB 클라이언트가 같은(동일한) 컴퓨터 안에 존재할때 접근 가능함을 의미
    실무에서는 보통 phpmyadmin 이라는 웹사이트를 설치하여 이 사이트를 통해 접근함

-- 로컬접근 계정 만들기
    create user "계정명"@"localhost" identified by "패스워드";
    ex :)) create user "user01"@"localhost" identified by "1234";

-- root 게정이 생성된 사용자 계정에게 DB 에 접근할 권한을 부여해야 특정 DB 에 접근할 권한이 생김
    grant all privileges on mydb.* to user01localhost;

-- 테이블의 구조를 확인하는 명령어
    desc 테이블명;

-- DB 의 명령어
    [1] DCL - Data Contorl Language
        대표적인 명령어 : grant(권한을 주는 명령어) , revoke(권한을 뺏는 명령어)
    [2] DML - Data Manipulation Language
        대표적인 명령어 : insert(추가) , delete(삭제) , update(수정) , select(조회)
        * select 는 애매해서 다른 명령어가 있다면 DML 이고 위의 네개만 있으면 select 는 DML 이 아님
    [3] DDL - Data Definition Language
        대표적인 명령어 : create , drop , alter , truncate

-- select 명령어의 사용법
    * between 연산자 = MySQL 및 Oracle 에서만 지원
    * between 숫자 and 숫자 = 숫자와 숫자 사이의 해당하는 것만

    * null 은 관계 연산자가 적용되지 않음
    * 따라서 null 을 사용하려면 is null 또는 is not null 을 사용해야함

    # ~ 로 시작하는 것을 찾기 위해서는 와일드카드 또는 like 연산자를 사용
    # _(한글자) / %(여러글자)
    # where ename like "A%";  = 첫글자가 A 인 데이터만 나옴
    # where ename like "%A";  = 마지막 글자가 A 인 데이터만 나옴
    # where ename like "%O%"; = 데이터 중간에 O 가 들어가는 데이터만 나옴
    # where ename like "_O%"; = 두번째 글자에 O 가 들어가는 데이터만 나옴

    # in 연산자가
    # 데이터를 나열해서 찾아야하는 경우 사용
    # select (필드명) from (테이블명) where (조건절) in (조건)
    # select (필드명) from (테이블명) where (조건절) in (조건) or (조건절) in (조건)
    # Oracle 의 경우 500 개 까지 가능

    # 정렬
    # select (필드명) from (테이블명) order by (필드명) asc;  - 일반정렬 (defalut)
    # select (필드명) from (테이블명) order by (필드명) desc; - 역정렬

    # 문자열을 자르는 함수
    substring(데이터명 , 시작자리 숫자(1부터 시작) , 끝자리 숫자)

    [1] select *
        from (테이블명);
        : 선택한 테이블의 모든 데이터를 보여달라는 명령어 / 데이터량이 많은 경우에는 사용하지 말것
    [2] select count(*)
        from (테이블명);
        : 선택한 테이블에 있는 데이터가 모두 몇 개인지 확인하는 명령어
    [3] select (필드명) , (필드명)
        from (테이블명);
        : 선택한 테이블의 선택한 필드의 데이터만 보여달라는 명령어
    [4] ailasing - 테이블 별칭
        select (별칭.필드명) , (별칭.필드명)
        from (테이블명) as (별칭);
        * 기본적으로 information_schema DB 에 사용자가 만드는 테이블 정보가 저장됨
        * ailasing 을 하지 않으면 DB 정보를 다 검색해서 정보를 읽어오므로 속도가 느림
        * ailasing 을 하게 되면 캐시를 하여 DB 정보를 메모리에 불러놓고 검색하므로 작업 속도가 유리
    [5] ailasing - 필드 별칭
        select (필드명) as (별칭)
        from (테이블명);
        * 테이블명 뿐만 아니라 필드명도 별칭으로 설정이 가능
    [6] select ifnull(필드명 , 기본값)
        from (테이블명);
        : 만일 선택한 필드에서 값이 Null 이 아닌 값이 오면 그 값을 주고 Null 값이 오면 기본값을 부여
    [7] select concat((필드명) , "문자열" , "문자열" , (필드명)) (as (별칭) 생략가능)
        from (테이블명);
        : concat 안에 있는 것들을 결합하여 출력
    [8] select (필드명)
        from (테이블명)
        where (조건절);
        : 조건절을 만족하는 데이터만 출력하는 명령어
        : 조건절은 기본적으로 or , and 모두 사용가능하며 산술연산자도 사용 가능

-- 테이블 확인 법
    [1] 필드 : 열
    [2] 타입
        - varchar() = (가변길이) 가변길이로 입력된 만큼 길이 메모리를 잡음 [ 최대 2000 Byte 까지 차지함 ]
                    = 문자열의 길이를 지정하더라도 실제 데이터길이 만큼만 메모리를 차지함
                    = 데이터의 앞 부분에 데이터의 길이값을 저장하고 있음
                    ex:)) 사용자 아이디 , 게시글의 제목 등
        - char()    = (고정길이) 크기가 변하지 않는 경우에만 char 타입을 사용
                    = 길이를 정하면 입력된 문자 길이가 작으면 나머지는 다 공백으로 채움
                    ex:)) 사번 , 학번 , 성별 , 연도 , 주민번호 , 우편번호 등 형식과 길이가 변하지 않는 것들
        - text      = 길이가 긴 데이터 타입
        - long text = 가장 길이가 긴 데이터 타입
    [2] Null : Null 값을 허용하는지 안 하는지에 대한 여부
    * Null 값은 DB 에서는 '알수없는' 의 의미이며 수학적으로는 '무한대' 의 의미를 가짐
    * 파이썬의 'None' 값과 동일한 취급
    * Null 값에 연산을 하게 되면 결과는 Null 로 동일함
    * 파이썬의 if 문  , 함수를 사용해서 DB 에서 처리 가능
    * DBMS 의 쿼리는 ANSI 표준이 있어서 비슷하지만 함수는 각자 다름
    [4] Key
        - PRI KEY (PrimaryKey) : 중복 절대 불가 , Null 불가 조건을 만족해야함
        - Default : 특별한 값을 입력하지 않았을 때 기본값으로 저장됨

-- .spl 파일 복원 명령어
[1] cmd 일반 사용시
    mysql -u root -p mydb(DB 파일명) < (spl 파일명).spl

[2] powershell 사용시
    cmd /c "mysql -u root -p mydb(DB 파일명) < (spl 파일명).spl"

* 다른 DBMS(데이터베이스 프로그램 등) 의 대부분은 데이터에 한해서 대/소문자를 구분함
* 하지만 MySQL 은 구분을 하지 못 함
* 대부분의 DBMS 는 count 에서 Null 값이 들어간 데이터는 카운트를 하지 않음(MySQL 은 함)
* DB 안에도 별도의 함수들이 있으니 가급적 파이썬으로 계산을 가져오지 말고 DB 안에서 해결할 것

* NVl    = Oracle 함수
* ISNULL
* IFNULL = (필드명 , 기본값) 만일 필드에서 값이 Null 이 아닌 값이 오면 그 값을 주고 Null 이면 기본값을 반환

-- 데이터베이스의 특징
    [1] 무결성 - 결함이 없는 성격
    [2] 중복성 베제 - 데이터의 중복 배제
    [3] 일관성 - 데이터가 중복도 없고 일관성이 있음

    이러한 DB 의 특징을 유지하기 위해서 DB 에서는 Primary key 라는 기능을 제공함

    ** 일부 데이터를 먼저 테이블에 넣어두고(초기화 값) Primary key 를 지정할 때 이미 들어가 있는 데이터가 중복이 되거나 Null 이 있으면 Primary key 를 지정할 수 없음
    ** Primary key 는 한 테이블 당 하나만 있음
    ** 여러개의 필드를 묶어서 하나의 Primary key 를 지정할 수 있음 , 단 하나의 테이블에 한 개만 지정가능

    MySQL 은 기본적으로 검색이 순차 검색으로 한 개씩 읽어서 검색
    색인 순차 검색 , 색인표를 만들어서 검색하며 Primary Key 를 지정하면 자동으로 색인(INDEX) 를 만들어줌

    Oracle 은 병행처리(검색) 으로 한 번에 여러개씩 읽어서 검색

    Primary key = 특정 필드 또는 여러 개의 필드를 묶어서 중복성을 배제하고 Null 값을 갖지 못하도록 제약하는 특성을 갖음
    예시 :)) 사번 , 학번 , 주민번호 등(단 현재 주민번호는 중복되는 것이 존재해서 현재는 사용 불가)

    ** empno 는 프라이머리키로 정해져 있어서 동일한 값이 입력될 수 없음
    mysql> insert into emp (empno, ename) value (8000, "홍길동");
    Query OK, 1 row affected (0.01 sec)

    mysql> insert into emp (empno, ename) value (8000, "임꺽정");
    ERROR 1062 (23000): Duplicate entry '8000' for key 'emp.PRIMARY'

    MySQL DB 필드 성격
    auto_increment : 자동 증가
    MySQL 은 auto_increment 속성이 있는 필드가 Primary key 이어야함

    * Oracle 에서는 시퀀스라는 객체