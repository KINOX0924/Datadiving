5월 26일 MySQL 강의

데이터베이스의 정의
[1] 통합데이터 - 동일데이터의 중복을 배제하여 중복의 최소화
[2] 저장데이터 - 컴퓨터가 접근할 수 있는 저장 매체에 저장된 데이터의 집합
[3] 운영데이터 - 조직의 몬재 목적 , 유용성 면에서 필요한 데이터의 집합
[4] 공용데이터 - 여러 응용프로그램이 공동으로 소유, 유지 가능한 데이터

데이터베이스의 목적
[1] 데이터의 독립성 - 데이터베이스의 논리적 구조 변경이 응용프로그램(특정 프로그램) 에 영향을 미치니 않는 성질을 의미
[2] 중복성의 최소화 - 동일 데이터가 여러 파일에 나누어 저장되는 경우를 배제하여 데이터의 집중 관리 및 저장 경비의 절감
[3] 데이터의 공유성 - 여러 응용프로그램에서 DB 내의 데이터를 공동 사용하여 타 응용프로그램에서도 기존 데이터의 재활용 가능
[4] 데이터의 보안성 - 사고로부터 데이터의 안전을 보장하고 , 비밀 유지 가능
[5] 데이터의 무결성 - 중앙 통제에 의한 갱신 및 검증으로 여러 파일의 데이터가 서로 일치하지 않는 현상인 데이터의 불일치를 제거, 즉 무결성의 보장(외래키)

데이터베이스의 특징
장점
    - 데이터의 다중 이용 가능
    - 파일 수정의 융통성 확보
    - 테이터관리의 용이성
    - 내용에 의한 데이터의 액세스
단점
    - 전산화 비용의 증가와 시스템의 복잡화
    - 프로그래머(DBA)의 재교육이 필요하게 되고 패키지 운용 요원이 필요
    - 병원 내 하드웨어와 소프트웨어의 추가구입 및 운용비용이 증가
    - 데이터의 집중 관리로 데이터 백업 이용이 증가

데이터베이스의 구성
[1] 데이터
[2] 하드웨어
[3] 소프트웨어
[4] 사용자


데이터베이스 모델
[1] 관계형 모델
    - 개체의 집합과 개체 집합 사이 특성 연관성 및 다양한 관계를 잘 파악하여 표현한 모델(테이블 관계)
        - 동일한 개체 집합들 간의 하나 이상의 관계가 성립
        - 관계에는 반드시 고유의 명칭을 사용하여 다른 관계들과 식별
    - 개체 : 데이터베이스에 저장될 실세계의 개체나 개념(의사/환자)
    - 속성 : 개체의 특성을 표현(의사번호/이름/주민번호/성별/주소)
    - 관계 : 두 개의 개체들 사이의 연관성(담당의사)

    - 관계형 모델의 용어
        - 관계 : 정보를 추출하는데 주요한 역할을 하는 관계
        - 속성 : 데이터의 가장 작은 논리적 단위로서 파일 구조상의 테이블의 열을 의미
        - 튜플 : 테이블의 행을 의미
        - 도메인 : 속성들이 나타낼 수 있는 값의 집합
        - 기본키 : 한 DB 내에서 모든 튜플을 유일하게 구별할 수 있는 속성
        - 후보키 : 기본키가 될 수 있는 모든 키값을 의미
    
    - 관계형 모델의 장단점
        - 장점
        [1] 데이터의 독립성과 구조적 독립성을 지원
        [2] 구조가 단순하고 사용이 편리
        [3] 데이터의 다대다 관계를 표현 가능
        [4] 데이터베이스 설계와 관리가 다른 모델보다 편리
        [5] 다른 데이터베이스로의 변환이 쉬움
        - 단점
        [1] 다른 모델에 비해 DBMS 성능이 떨어짐
        [2] 데이터 종속성과 구조적 종속성, 강력한 질의 처리 등을 해결하기 위해 HW 와 OS 등의 부담이 따름
        [3] 장애 발생 시 회복 과정이 복잡
        * 이러한 단점에서도 현재 관계형 데이터베이스가 압도적으로 유리하기 때문에 다른 모델은 거의 사용하지 않음

[2] 계층형 모델
    - 링크를 사용하여 자료와 자료 사이의 관계성을 표시
    - 주로 조직도 또는 메뉴 구조를 만들때 사용하며 그 외에는 거의 사용되지 않음


데이터베이스 시스템 구성
[1] 스키마(schema) - 데이터베이스의 논리적 구조를 전체적으로 명시한 것
    - 외부 스키마 : 데이터베이스의 논리적 구조로서, 공용의 의미보다는 어느 특정 응용에 국한된 논리적 데이터 구조
    - 개념 스키마 : 데이터베이트의 전체적인 논리 구조로서, 모든 응용 프로그램이나 사용자들이 필요로 하는 데이터를 종합한 조직 전체의 데이터베이스 구조 [한 개만 존재]
    - 내부 스키마 : 물리적 저장장치의 입장에서 본 데이터베이스의 구조

[2] 데이터베이스 언어 - 데이터베이스를 정의하고 액세스 하는 수단을 의미
    - DDL(데이터정의어) : 데이터베이스를 구축하는데 필요한 매크로와 특수 명령어로 구성된 독립된 언어
    - DML(데이터조작어) : 데이터 서브언어라고도 하며, 응용 프로그램이 데이터베이스의 데이터를 사용자에게 제공하기 위한 조작 방법 등을 제공
    - DCL(데이터제어어) : 데이터 제어를 정의하고 기술하는 언어

[3] DBMS(데이터베이스 관리 시스템)
    - 데이터베이스의 구성, 접근방법, 유지관리의 책임을 지는 소프트웨어
    - 사용자가 데이터 파일들을 물리적으로 구현하지 못하도록 보호
    - 저장, 검색, 관리를 용이하게 할 수 있도록 GUI 를 제공

[4] 데이터베이스 사용자
    - 데이터베이스를 이용하는 사람(관리자/최종 사용자/응용 프로그래머(DBA))


데이터모델링
- 데이터 모델링 순서
    [1] 개념적 모델링 : 현실 세계의 실체를 데이터베이스로 저장하기 위해서 개념 세계의 개체로 추상화하는 과정
    [2] 논리적 모델링 : 개념적 모델링에서 생성된 정보 구조를 DBMS 가 이해할 수 있는 논리적인 데이터 구조로 변환하는 과정
    [3] 물리적 모델링 : 논리적 데이터 구조를 컴퓨터에 저장할 수 있도록 물리적 데이터 구조로 변환하는 과정(구조화)


트랜잭션
데이터베이스에서 하나의 작업 단위로 처리되는 일련의 연산 묶음을 말함
모든 연산이 성공하면 Commit , 하나라도 실패하면 Rollback 으로 전체를 취소할 수 있음
위의 과정을 통해 데이터의 무결성과 일관성을 보장하며 트랜잭션은 ACID 속성을 충족해야함
[1] Atomicity(원자성)       : 모두 수행되거나, 전혀 수행되지 않음
[2] Consistency(일관성)     : 트랜잭션 전후 데이터 일관성 유지
[3] Isolation(독립성)       : 동시에 실행되는 트랜잭션 간 간섭 없음
[4] Durability(지속성)      : 커밋된 데이터는 영구 반영됨

트랜잭션 기본 코드 - 사용자가 Commit 을 할때까지 트랜잭션을 한 시점부터의 데이터는 계속 백업되어 있음
-> start transaction;               -- 이 부분부터 트랜잭션 시작
-> 작업 코드
-> 작업 코드
-> rollback;                        -- 필요시 롤백(백업)
-> savepoint (포인트명);             -- 세이브포인트 지점
-> rollback to savepoint (포인트명); -- 해당 세이브포인트 지점으로 롤백

-> commit;                          -- 변경한 데이터를 확정하는 명령어 / 한 번 commit 한 데이터는 롤백할 수 없음